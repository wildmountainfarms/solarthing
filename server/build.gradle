buildscript {
    ext {
        // https://github.com/spring-projects/spring-boot/wiki#release-notes
        // https://github.com/spring-projects/spring-boot/releases
        springBootVersion = '3.1.1'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}
apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

version = '0.0.1-SNAPSHOT'

compileJava {
    // TODO We don't need the -parameters compiler argument (I don't think), plus now that Java 11 is required for GraphQL, what does it do/is it needed if we did need it?
    options.compilerArgs << '-parameters' // we don't want to use have to put @GraphQLArgument everywhere
}

dependencies {
    implementation('org.springframework.boot:spring-boot-starter-web') {
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
    }
    implementation 'org.springframework.boot:spring-boot-starter-log4j2'
    // https://mvnrepository.com/artifact/com.graphql-java/graphql-java-spring-boot-starter-webmvc
    implementation 'com.graphql-java:graphql-java-spring-boot-starter-webmvc:2.0'
//    testImplementation 'org.springframework:spring-test'
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
    }

//    implementation 'com.graphql-java:graphql-java:14.0' graphql-spqr adds this dependency
    implementation 'io.leangen.graphql:spqr:0.12.2' // https://github.com/leangen/graphql-spqr/releases

    // Although we don't need this dependency, we need to bump the version so that couchdb has the version it needs
    api group: 'com.squareup.okhttp3', name: 'okhttp', version: "$okhttpVersion"

    // This is necessary to bump the jackson version to whatever SolarThing is using
    api "com.fasterxml.jackson.core:jackson-core:$jacksonVersion"
    api "com.fasterxml.jackson.core:jackson-annotations:$jacksonVersion"
    api "com.fasterxml.jackson.core:jackson-databind:$jacksonVersion"
}
jar {
    enabled = true
}
bootRun {
    workingDir = new File("../program/graphql")
}
/*
If we want to in the future, we can apply the 'war' plugin and configure the war task to be enabled here.
We could then use bootWar to generate a war file to be used inside a tomcat server.
 */

/*
If we want to in the future, we can configure this.
However, configuring a buildpack (https://buildpacks.io/docs/operator-guide/create-a-builder/) is a learning curve.
The default buildpack setup actually works perfectly, but compiling to multiple architectures (platforms)
  is actually a pain in the ass to find documentation on.
bootBuildImage {
    // https://docs.spring.io/spring-boot/docs/current/gradle-plugin/reference/htmlsingle/#build-image
    // docker buildx create --use --platform linux/386,linux/amd64,linux/arm/v7,linux/arm64/v7,linux/ppc64le,linux/s390x
    // https://docs.spring.io/spring-boot/docs/current/gradle-plugin/reference/htmlsingle/#build-image.examples.custom-image-builder
    def containerRegistry = "ghcr.io"
    imageName = "$containerRegistry/wildmountainfarms/solarthing-server:latest"
}
*/

processResources {
    dependsOn(":web:build")
    from("$rootDir/web/build") {
        into("static")
    }
}

tasks.register('generateSchema', JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    // Used to generate schema to file
    mainClass = "me.retrodaredevil.solarthing.rest.graphql.OutputSchemaMain"
    // workingDir is implicitly /graphql
    args = ["../web/schema.graphqls"]
}
