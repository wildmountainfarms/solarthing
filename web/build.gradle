plugins {
    id "com.github.node-gradle.node" version "5.0.0"
}
jar.enabled = false

tasks.register('appNpmBuild', NpmTask) {
    // This commented code does not work because react-scripts spawns a node process itself internally and that fails because it doesn't see this PATH for some reason
    // Here's a command that will come in useful if we ever get this working again
    //   echo "NODE_BIN=$(whereis npm | sed "s/npm: //" | sed "s/\/npm$//")" >> "gradle.properties"
    /*if (project.hasProperty("NODE_BIN")) {
        String newPath = ((String) environment["PATH"]) + ":" + findProperty("NODE_BIN")
        // environment is defined in NpmTask
        environment.put("PATH", newPath)
    }*/
    environment.put("NODE_ENV", "development")
    args = ["run", "build"]

    // Manual caching configuration:https://docs.gradle.org/current/userguide/build_cache.html#using_the_runtime_api
    // I have configured caching here specifically because most things in :server will run processResources, which depends on this task
    outputs.cacheIf { true }

    inputs.dir(file("src"))
            .withPropertyName("src")
            .withPathSensitivity(PathSensitivity.RELATIVE)
    inputs.dir(file("public"))
            .withPropertyName("public")
            .withPathSensitivity(PathSensitivity.RELATIVE)

    inputs.files("package.json", "package-lock.json", "tsconfig.json", "codegen.yml")
            .withPropertyName("configFiles")
            .withPathSensitivity(PathSensitivity.RELATIVE)

    outputs.dir(buildDir)
            .withPropertyName("buildDir")
}
tasks.register('generateCode', NpmTask) {
    args = ["run", "graphql:codegen"]
    // TODO (as commented in server/build.gradle), this dependsOn may cause :web:build to run, which is not always ideal
    dependsOn(":server:generateSchema")
}

assemble.dependsOn(appNpmBuild)
