
buildscript {
    ext {
        junit5Version = '5.9.2' // https://junit.org/junit5/
        junit5PlatformVersion = '1.9.2'

        slf4jVersion = '2.0.6' // http://www.slf4j.org/download.html
        log4jVersion = '2.19.0' // https://logging.apache.org/log4j/2.x/javadoc.html
        // Note: Since Jackson 2.14, Android SDK 26 is required
        // https://github.com/FasterXML/jackson/wiki/Jackson-Releases
        jacksonVersion = '2.14.1' // https://github.com/FasterXML/jackson-databind/tags
        // retrofit is why we need allow-opens. context: https://stackoverflow.com/questions/60915381/retrofit2-maven-project-illegal-reflective-access-warning // https://github.com/square/retrofit/issues/3341
        retrofitVersion = "2.9.0" // https://github.com/square/retrofit/tags
        shadowVersion = '7.1.2' // https://github.com/johnrengelman/shadow/releases // only works on gradle 7
        ioLibVersion = '2.3.0' // https://github.com/retrodaredevil/io-lib/releases
        okhttpVersion = "4.10.0" // https://mvnrepository.com/artifact/com.squareup.okhttp3/okhttp
        couchdbJavaVersion = '1.1.0'
//        couchdbJavaVersion = "8ff00d2c490af49ca19b29a7852b72578a97fae8".substring(0, 10)
        dockerComposePluginVersion = "0.16.11" // https://github.com/avast/gradle-docker-compose-plugin/releases
        errorpronePluginVersion = '3.0.1' // https://github.com/tbroyer/gradle-errorprone-plugin/releases
        errorproneCoreVersion = '2.18.0' // https://mvnrepository.com/artifact/com.google.errorprone/error_prone_core
        antlrVersion = "4.12.0"
    }
    dependencies {
        classpath "com.avast.gradle:gradle-docker-compose-plugin:$dockerComposePluginVersion"
    }
}


plugins {
    id 'com.diffplug.spotless' version '6.13.0' // https://search.maven.org/search?q=a:spotless-plugin-gradle
    id 'net.ltgt.errorprone' version "$errorpronePluginVersion"
}

version "0.0.1-SNAPSHOT"
description = """SolarThing"""
group = "me.retrodaredevil.solarthing"


spotless {
    // More info on ratchet https://github.com/diffplug/spotless/tree/master/plugin-gradle#ratchet
//    ratchetFrom 'origin/master'
    // https://github.com/diffplug/spotless/tree/master/plugin-gradle#eclipse-jdt if you have eclipse xml
    enforceCheck = false // doesn't have to be formatted correctly for ./gradlew build to work
    format 'javaBasic', com.diffplug.gradle.spotless.JavaExtension, {
        target fileTree('.') {
            include '**/*.java'
            exclude '**/build/**', '**/build-*/**'
        }
        toggleOffOn()
        removeUnusedImports()
        endWithNewline()
    }
    format 'javaIndent', com.diffplug.gradle.spotless.JavaExtension, {
        target fileTree('.') {
            include '**/*.java'
            exclude '**/build/**', '**/build-*/**'
        }
        toggleOffOn()
        indentWithTabs()
        toggleOffOn("/*", "*/") // It doesn't like tabs then a space, which are present in Javadocs, so just disable
    }

    format 'javaNewOnly', com.diffplug.gradle.spotless.JavaExtension, {
        ratchetFrom 'origin/master'
        target fileTree('.') {
            include '**/*.java'
            exclude '**/build/**', '**/build-*/**'
        }
        toggleOffOn()
        trimTrailingWhitespace()
        // https://github.com/diffplug/spotless/issues/649#issuecomment-738199681
//        replaceRegex("No wildcard", "import\\s+[^\\*\\s]+\\*;(\\r\\n|\\r|\\n)", "\$1") // disables wildcard imports if we want
        /*
        Pattern pattern = Pattern.compile("import\\s+[^\\*\\s]+\\*;(\\r\\n|\\r|\\n)", Pattern.UNIX_LINES | Pattern.MULTILINE)
        custom "No wildcard", { original ->
            Matcher matcher = pattern.matcher(original)
            if (matcher.find()) {
                throw new AssertionError("Wildcard imports are not allowed")
            }
            return original
        }
         */

    }
}

allprojects {
    repositories {
        mavenLocal()
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
        google()
    }
}

subprojects {
    apply plugin: 'java-library'
    apply plugin: 'maven-publish'
    apply plugin: 'net.ltgt.errorprone'
    repositories {
        maven { url "https://jitpack.io" }
        maven { url "https://repo.maven.apache.org/maven2" }
    }
    dependencies {
        // https://mvnrepository.com/artifact/com.google.errorprone/error_prone_core
        errorprone "com.google.errorprone:error_prone_core:$errorproneCoreVersion"
        errorprone "com.google.errorprone:error_prone_annotations:$errorproneCoreVersion"

        testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: junit5Version
        testImplementation "org.junit.jupiter:junit-jupiter-params:$junit5Version"
        testImplementation "org.junit.platform:junit-platform-commons:$junit5PlatformVersion"
        testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter', version: junit5Version
        testImplementation 'com.tngtech.archunit:archunit:0.22.0' // https://github.com/TNG/ArchUnit/releases

        // https://mvnrepository.com/artifact/com.google.code.findbugs/jsr305
        implementation group: 'com.google.code.findbugs', name: 'jsr305', version: '3.0.2'
        implementation 'org.jetbrains:annotations:23.0.0' // https://search.maven.org/search?q=g:org.jetbrains%20AND%20a:annotations
    }
    test {
        useJUnitPlatform()
        if(JavaVersion.current() >= JavaVersion.VERSION_1_9) {
            // If we don't have this, we get warnings for something about retrofit2.Platform
            //   - likely solcast action node
            jvmArgs "--add-opens=java.base/java.lang.invoke=ALL-UNNAMED"
        }
    }
    tasks.withType(JavaCompile).configureEach {
        options.errorprone {
//            disableWarningsInGeneratedCode = true // doesn't seem to work
            disable("MissingSummary") // Our JavaDocs don't need to be perfect
            disable("StringSplitter") // Yes String.split(String) has surprising behavior, but we know how to be careful.
            disable("EqualsGetClass") // Most of the time we prefer that equality checks don't evaluate to true for subclasses
            disable("NullableOnContainingClass") // This is dumb, who would do it this way? A.B reads as a fully qualified name to me...
            disable("InvalidLink") // So many times this is wrong. #equals(Object) is a valid link!
            disable("ComparableType") // different Identifiers need to be able to be compared to each other, so we disable this for now.
            disable("DoNotClaimAnnotations") // TODO figure how how to make our annotation processor more "correct"
//            disable("ReturnValueIgnored") // remove this once this is fixed: https://github.com/google/error-prone/issues/3292
            disable("UnusedMethod") // This is useful, but has this issue: https://github.com/google/error-prone/issues/3144
            disable("InlineMeSuggester") // Wrong when annotated by annotations, and I don't need this feature
            disable("EmptyCatch") // This is a great warning, but IntelliJ wants ignored exceptions to be named "ignored" and ErrorProne wants "ok"...
            disable("FutureReturnValueIgnored") // For "send and forget" stuff, this is really annoying
            disable("UnusedVariable") // We are OK with this most of the time
            disable("CanonicalDuration") // I will specify my durations in whatever units I please

            error("MissingOverride")

            // Experimental Errors
            enable("ClassName")
            warn("DepAnn")
            warn("EmptyIf")
            warn("InsecureCryptoUsage")
            // Experimental Warnings
            warn("AnnotationPosition")
            warn("ConstantPatternCompile")
            warn("DifferentNameButSame")
            error("EqualsBrokenForNull")
            warn("InconsistentOverloads")
            warn("InitializeInline")
            warn("InterfaceWithOnlyStatics")
            warn("InterruptedExceptionSwallowed")
            warn("Interruption")
//            warn("MemberName") // useful, but stuff like _myVariable does not work, and that can be useful *sometimes*
            warn("NonCanonicalStaticMemberImport")
//            warn("PreferJavaTimeOverload") // SolarThing uses a lot of dateMillis, and many times it does not make sense to use java.time
            warn("RedundantOverride")
            warn("RedundantThrows")
//            warn("ThrowSpecificExceptions") // TODO Something we need to work on in the SolarThing codebase
            warn("TransientMisuse")
            warn("TryWithResourcesVariable")
            warn("UnnecessarilyFullyQualified")
            warn("UnnecessaryAnonymousClass") // suggest
            warn("UnusedException")

            // Experimental Suggestions
            warn("ConstantField")
//            warn("FieldCanBeFinal") // Useful on everything but :client module, because of the usages of @JsonProperty on mutable fields.
            warn("FieldCanBeLocal")
            warn("FieldCanBeStatic")
//            warn("FieldMissingNullable") // There are many private fields where this is easy enough to tell
            warn("ForEachIterable")
            warn("LambdaFunctionalInterface")
//            warn("MethodCanBeStatic") // TODO Very, very useful, but I don't need this warning in tests
//            error("MissingBraces") // I would love to enforce this in all places except equals(), so disable for now
            error("MixedArrayDimensions")
//            error("MultiVariableDeclaration") // While frowned upon many times, we use this a lot and it is helpful somtimes
            error("MultipleTopLevelClasses")
            error("PackageLocation")
//            warn("ParameterMissingNullable") // This is useful. Maybe uncomment if we become more religious about use of @Nullable
            error("PrivateConstructorForUtilityClass") // not completely ideal for spring classes with static initialization
            warn("RemoveUnusedImports")
//            warn("ReturnMissingNullable") // Useful onlyl if we become more religious about use of @Nullable
            warn("ReturnsNullCollection")
            warn("SwitchDefault")
            error("SymbolToString")
            warn("ThrowsUncheckedException") // we should be unchecked exceptions in JavaDoc instead
            warn("TryFailRefactoring")
            error("TypeToString")
//            warn("UngroupedOverloads") //
            warn("UnnecessaryBoxedAssignment")
            warn("UnnecessaryBoxedVariable")
            error("UnnecessaryStaticImport")

        }
    }
    gradle.projectsEvaluated {
        tasks.withType(JavaCompile){
            options.compilerArgs << "-Xlint:deprecation"
        }
    }
    publishing {
        publications {
            mavenJava(MavenPublication) {
                // thanks https://stackoverflow.com/a/68515859/5434860
                groupId = "${group}"
                artifactId = "${project.name}"
                version = "${version}"

                from project.components.java
            }
        }
    }
}
project(":core"){
    apply plugin: 'java'
    dependencies {
        annotationProcessor project(":process-annotations")
    }
}
project(":common"){
    apply plugin: 'java'
    dependencies {
        api project(":core")
        api project(":action-lang")
        annotationProcessor project(":process-annotations")
    }
}
project(":client"){
    apply plugin: 'java'
    apply plugin: 'docker-compose'
    dependencies {
        api project(":core")
        api project(":common")
        api project(":serviceapi")
        annotationProcessor project(":process-annotations")
    }
    test {
        useJUnitPlatform {
            excludeTags 'integration'
        }
    }
    task integration(type: Test) {
        // In the future, we can use the Test Suite feature rather than doing this manually: https://docs.gradle.org/7.3.1/userguide/jvm_test_suite_plugin.html
        useJUnitPlatform {
            includeTags 'integration'
        }
        if(JavaVersion.current() >= JavaVersion.VERSION_1_9) {
            // If we don't have this, we get warnings for something about retrofit2.Platform
            jvmArgs "--add-opens=java.base/java.lang.invoke=ALL-UNNAMED"
        }
    }
    dockerCompose {
        useComposeFiles = ['../testing/couchdb-compose.yml']
        isRequiredBy integration
    }
}
project(":serviceapi"){
    apply plugin: 'java'
    dependencies {
        api project(":core")
        annotationProcessor project(":process-annotations")
    }
}
project(":graphql"){
    apply plugin: 'java'
    dependencies {
        api project(":core")
        api project(":common")
        api project(":serviceapi")
        annotationProcessor project(":process-annotations")
    }
}
project(":action-node"){
    apply plugin: 'java'
    dependencies {
        annotationProcessor project(":process-annotations")
    }
}
project(":notation-script"){
    apply plugin: 'java'
    dependencies {
        annotationProcessor project(":process-annotations")
    }
}
project(":action-lang"){
    apply plugin: 'java'
    dependencies {
        api(project(":notation-script")){
            // we do this because https://github.com/gradle/gradle/issues/820
            exclude group: "org.antlr", module: "antlr-runtime"
            exclude group: "org.antlr", module: "antlr4"
            // We exclude antlr4-runtime because we add it below as an api dependency rather than an implementation dependency
            exclude group: "org.antlr", module: "antlr4-runtime"
            exclude group: "org.antlr", module: "ST4"
        }
        // https://mvnrepository.com/artifact/org.antlr/antlr4-runtime
        api group: 'org.antlr', name: 'antlr4-runtime', version: "$antlrVersion"

        api project(":action-node")
        annotationProcessor project(":process-annotations")
    }
}

wrapper {
    gradleVersion = '7.4.2'
    distributionType = Wrapper.DistributionType.ALL
}
